{
  "name": "termhelper",
  "version": "0.1.7",
  "description": "Allow processing of key press events and strings on enter key. Log input and output. Execute terminal commands and more.",
  "author": {
    "name": "Elijah Cowley",
    "email": "ecowley@epcit.biz",
    "url": "http://epcit.biz"
  },
  "main": "termhelper.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/greywolf001au/termhelper.git"
  },
  "keywords": [
    "keypress",
    "line",
    "process",
    "core",
    "logging",
    "execute",
    "run"
  ],
  "license": "MIT",
  "private": false,
  "dependencies": {
    "keypress": ">= 0.1.0"
  },
  "readme": "  Terminal Helper\n\n  Version: 0.1.7\n\n  Author: Elijah Cowley\n\n  Website: http://epcit.biz\n  \n  IRC: irc://irc.epcit.biz:6667\n  \n  IRC_Nick: GreyWolf\n  \n  IRC_Channels: #epcit, #help, #nodejs\n\nThis module is designed to allow both keypress and string event firing and includes some helper methods for terminal commands.\nI have also included basic processing of arrow keys and backspace.\n\nTested on Debian Linux, please contact me on IRC or via email [ ecowley@epcit.biz ] to report any bugs or get help using this modules.\n\nPlease check the README.md file for a more up to date help as this version is difficult to maintain.\n\n  -----------------------------------------------------------------------------------------------\n  \n** Install\n\nInstall this module using NPM or copy the package to your applications '/node_modules' directory.\n\n    npm install termhelper\n\n  -----------------------------------------------------------------------------------------------\n  \n** Useage\n\nIn the application files you would like to use this module add the following line:\n\n    var term = require('termhelper')\n\n  -----------------------------------------------------------------------------------------------\n  \n** Settings\n\nThe settings can be changed in termhelper.lib.js\nThe main settings are described here for reference, other settings may be added in future versions.\n\nAvailable Settings:\n\n    |  Section    |  Setting      |    Default Value    |               Description                   |\n    ---------------------------------------------------------------------------------------------------\n      settings       echoKeys          true                 Outputs key on key stroke\n      settings       prompt            '> '                 Sets the prompt string\n      settings       termHistory       true                 Keep command history\n      settings       allowKill         true                 Allow CTRL + C to kill app\n      settings       lineEndOut        '\\n'                 Line end charater to append to output\n      settings       lineEndIn         '\\n'                 Line end charater to listen for on input\n      settings       appendEndChar     true                 Append lineEnd character to event data\n      settings       debug             false                Outputs keystroke data\n      settings       allowRun          true                 Allow running of shell commands\n      settings       date_format         0                  Sets the format to use for dates\n      settings       date_splitter      '-'                 Sets the default date splitter (for prompt)\n    ---------------------------------------------------------------------------------------------------  \n      log            path               ''                  Set the path for storing logs\n      log            dir_mode          '0775'               Use mode when creating paths\n      log            level               3                  Logging level (input, output, both)\n      log            extension         'log'                Create log files with this extension\n      log            format              0                  Date format for log filenames\n      log            hourly            false                Create a new log file each hour\n      log            timestamp         true                 Place timestamp before each log entry\n      log            date_splitter      '-'                 Use this date splitter for log files\n    ---------------------------------------------------------------------------------------------------\n      alias          run              'run'                 Change the terminal run command\n      alias          echo             'echo'                Change the terminal echo command\n      alias          exit             'exit'                Change the terminal exit command\n      alias          prompt          'prompt'               Change the terminal prompt command\n      \n      \n\nSettings can be modified using in the following manner:\n    term.set(section, key, value)\nWhere 'section' refers to the section key, current sections are: settings, log, alias\nIf a section is null the default section of 'settings' will be used.\nKey refers to the settings key to change, key may be an object of key/value pairs.\nValue is the new value for the setting.\n\n    Example:\n\n    term.set('settings', 'prompt', 'node.js> ');\n\n    or\n    \n    term.set(null, {\n      prompt: 'node.js> ',\n      debug: true\n    });\n\nNote:\n\tTo have no prompt displayed set the prompt to a blank string.\n\t\n\n  -----------------------------------------------------------------------------------------------\n\n** Processed Keys\n\n    |   Key   |           Default Function             |\n    ----------------------------------------------------\n        UP          Arrow Scroll back through history\n        Down        Arrow Scroll forward through history\n        Left        Arrow Move cursor back\n        Right       Arrow Move cursor forward\n      Backspace     Delete character behind cursor\n        Delete      Delete character infront of cursor\n        Enter       Process line\n        CTRL+C      Exit application\n        Home\t\tMove cursor to start of line\n        End\t\t\tMove cursor to end of line\n\n  -----------------------------------------------------------------------------------------------\n\n** Events\n\nEvents can be set for a single keypress and on line data using the following:\n\n    term.on('before_proc', function(ch, key) {\n      Add your code here....\n    }\n\n    term.on('keypress', function(ch, key) {\n      Add your code here....\n    }\n\n    term.on('line', function(data) {\n      Add your code here....\n    }\n\nDefault key press processing can be bypassed by returning false from your event handler.\nExample:\n\n    term.on('before_proc', function(ch, key) {\n      if (key && key.name === 'home') {\n        Add code here....\n        return false;\n      }\n      return { home: false }\n    }\n\nNote: bypassing command processing will cause all key press events to be bypassed including enter and CTRL+C, to skip individual keypress events return an object containing keyname: false\n\nLine processing will give an invalid command when false is returned from the event handler method.\nOptionally an object can be returned containing a key named 'valid' and a boolean value.\nThe prompt can be disabled for a command by returning an object with a 'prompt' key and the boolean value of false (see example.js)\n\n  -----------------------------------------------------------------------------------------------\n\n** Available Methods\n\nSeveral methods have been added to make working in the terminal easier\n\n    Method        |      Useage         |   Description                                                                    |\n    ------------------------------------------------------------------------------------------------------------------------\n    Set\t\t\t    term.set(s, k, v)\t\tChange section of termhelper.lib.js\n    On\t\t\t\tterm.on(evt, method)\tOverwrite default event handler with custom method\n    Clear              term.Clear()         Clear terminal window\n    ClearLine        term.ClearLine()       Clear output from current line (clear prompt, does not clear input string)\n    getPrompt\t\t term.getPrompt()\t\tReturns the evaluated prompt string\n    Prompt            term.Prompt()         Output prompt string\n    Write            term.Write(text)       Send text to terminal\n    Writeln         term.Writeln(text)      Send text to terminal with line end\n    CursorPos        term.CursorPos()       Returns an integer denoting cursor position\n    CursorTo         term.CursorTo(pos)     Move the cursor to a specified position on the line\n    Run              term.Run(command)      Run shell commands from your node apps\n    Echo\t\t\t term.Echo(command)\t\tEcho string, evaluates JavaScript\n    log.set         term.log.set()\n    log.Write\t\tterm.log.Write(data)\tWrite data to log file\n    log.Writeln\t\tterm.log.Writeln(data)\tWrite data to log and move to next line\n\n  -----------------------------------------------------------------------------------------------\n\n** Processed Input\n\nLine inputs processed from terminal\n\n\tRun\t\t\tUse the run alias to execute an application\n\tEcho\t\tEvaluate some JavaScript and echo the result\n\tPrompt\t\tChange the terminal prompt\n\tExit\t\tExits the application\n\n  -----------------------------------------------------------------------------------------------\n\n** Prompt String\n\nThe prompt string sets the prompt that is dispayed for command entry. The string can be a literal string or a JavaScript string to be evaluated.\nThe prompt string can be changed by editing the settings.prompt variable in termhelper.lib.js, using the set method to change the settings.prompt variable or by calling the prompt alias at the command line.\n\nYou may also use the following notation to insert information to the prompt string:\n\n    %d\t\tThe date with the format as defined in termhelper.lib.js\n    %p\t\tThe current command line path\n    %t\t\tThe time, this uses the systems locale time string\n    %v\t\tTermhelper version number\n    %!\t\tThe command history position number (changes when cycling through history)\n    %#\t\tThe history length (command number)\n    \nExamples:\n    \nIn termhelper.lib.js:\n\n    settings: {\n      prompt: \"%p [%!]> \";\n      ...\n\nIn your application:\n    \n    term.set(\"settings\", \"prompt\", \"[%d]%p> \");\n    \nOn the command line:\n\n    prompt __dirname + '> ';\n\nNote: The values set in these examples could be set using in any of the prompt setting methods.\n\n  -----------------------------------------------------------------------------------------------\n  \n** App object\n\nA blank object called app has been added to store custom variables for displaying in a prompt or other evaluated commands.\n\n  -----------------------------------------------------------------------------------------------\n\n** Changes For Future Versions\n\n1) Make this a standalone module without requirement of keypress module.\n\n2) Possibly add string colouring and styles.\n\n  -----------------------------------------------------------------------------------------------\n\n** Complimentary Modules\n\nColors: this module will allow terminal colors and styles however this library extends the String prototype. While it works quite nicely it is not the prefered method.\n\n  -----------------------------------------------------------------------------------------------\n\n** Other Projects\n\nNode.js IRC Client, this application has the alias NoIRC and will be made available soon.\nNoIRC allows browser connections to an IRC server.\nThis project is still in development and is being tested on UnrealIRCD.\nif you run a different IRCD and would like to create an interpreter please contact me on my IRC server.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "termhelper@0.1.1",
  "dist": {
    "shasum": "88248f83bef5f026b95da8ad533c0b3b29335c22"
  },
  "_from": "termhelper@",
  "_resolved": "https://registry.npmjs.org/termhelper/-/termhelper-0.1.1.tgz"
}
